<?php

/**
 * @file
 * Extrapolates extra site statistics for view in the administer>reports area
 * and/or in blocks
 */

/**
 * Implements hook_menu().
 */
function xstatistics_menu() {
  $items = [];
  $items['admin/reports/summary'] = [
    'title' => 'XStatistics: summary',
    'description' => 'View a summary of referrers, nodes and pages views, and feed subscribers',
    'page callback' => 'xstatistics_summary',
    'access arguments' => ['access statistics'],
  ];
  $items['admin/reports/usage'] = [
    'title' => 'XStatistics: usage',
    'description' => 'View a summary of nodes by status, comments, and users',
    'page callback' => 'xstatistics_usage',
    'access arguments' => ['access statistics'],
  ];

  return $items;
}

/**
 * Implements hook_help().
 */
function xstatistics_help($section) {
  $output = '';

  switch ($section) {
    case 'admin/help#xstatistics':
    case 'admin/reports/summary':
    case 'admin/reports/usage':
      $output = t('This page shows usage statistics of your site');
      break;
  }
  return $output;
}

/**
 * Implements hook_block().
 */
function xstatistics_block($op = 'list', $delta = 0) {
  $block = [];
  $title = [
    t('Site summary'),
    t('Site usage'),
  ];

  switch ($op) {
    case 'list':
      $block[0]['info'] = $title[0];
      $block[1]['info'] = $title[1];
      break;

    case 'view':
      switch ($delta) {
        case 0:
          $block['subject'] = t($title[$delta]);
          $block['content'] = xstatistics_summary('block');
          break;
        case 1:
          $block['subject'] = t($title[$delta]);
          $block['content'] = xstatistics_usage('block');
          break;
        }
      break;
    }
    return $block;
}

/**
 * Generate block/page summary data.
 *
 * @param string $mode
 *   The type of formatting to use: "page" or "block".
 *
 * @return string
 *   The formatted result.
 */
function xstatistics_summary($mode = 'page') {
  $output = xstatistics_do_summary();
  return xstatistics_output($mode, $output);
}

/**
 * Generate block/page usage data.
 *
 * @param string $mode
 *   The type of formatting to use: "page" or "block".
 *
 * @return string
 *   The formatted result.
 */
function xstatistics_usage($mode = 'page') {
  $output = xstatistics_do_usage();
  return xstatistics_output($mode, $output);
}

/**
 * Format block/page summary data.
 *
 * @param string $mode
 *   The type of formatting to use: "page" or "block".
 * @param string $output
 *   The data, already formatted, to wrap for display.
 *
 * @return mixed
 *   The rendered data.
 */
function xstatistics_output($mode = 'page', $output) {
  switch($mode) {
    case 'page':
      print theme($mode, $output);
      break;

    case 'block':
      return $output;
      break;

    default:
      watchdog('xstatistics', 'Unexpected mode: @mode', ['@mode' => $mode], WATCHDOG_ERROR);
  }
}

/**
 * Build summary data.
 *
 * @return string
 *   A formatted table of results.
 */
function xstatistics_do_summary() {
  if (variable_get('statistics_count_content_views', 0)) {
    // Prepare amount of node_views.
    // TODO rewrite to use count() and sum()
    $count_nodes_view_total = 0;
    $count_nodes_view_daily = 0;
    $res =  db_query('SELECT totalcount, daycount FROM {node_counter}');
    while ($count = db_fetch_object($res)) {
      $count_nodes_view_total = $count_nodes_view_total + $count->totalcount;
      $count_nodes_view_daily = $count_nodes_view_daily + $count->daycount;
    }
  }
  else {
    // If counter is disabled then show disabled link.
    $disabled_link = l(t('Enable Count Content Views to see values'), 'admin/settings/statistics');
    $count_nodes_view_total = $disabled_link;
    $count_nodes_view_daily = $disabled_link;
  }

  $yesterday = time() - 86400;

  $sql = <<<SQL
SELECT COUNT(DISTINCT(url)) AS referrers 
FROM {accesslog} 
WHERE url <> '' AND url NOT LIKE '%%%s%%' AND timestamp >= %d
SQL;
  $count_referrer_ext_day = db_fetch_array(db_query($sql, $_SERVER['HTTP_HOST'], $yesterday));

  $sql = <<<SQL
SELECT COUNT(DISTINCT(url)) AS referrers 
FROM {accesslog} 
WHERE url <> '' AND url LIKE '%%%s%%' AND timestamp >= %d
SQL;
  $count_referrer_int_day = db_fetch_array(db_query($sql, $_SERVER['HTTP_HOST'], $yesterday));

  $sql = <<<SQL
SELECT COUNT(aid) AS hits 
FROM {accesslog} 
WHERE timestamp >= %d
SQL;
  $count_hits_day = db_fetch_array(db_query($sql, $yesterday));

  $sql = <<<SQL
SELECT COUNT(path) AS hits 
FROM {accesslog} 
WHERE timestamp >= %d
SQL;
  $count_pageviews_day = db_fetch_array(db_query($sql, $yesterday));

  $sql = <<<SQL
SELECT COUNT(DISTINCT(hostname)) AS hostname 
FROM {accesslog} 
WHERE path LIKE '%/feed' OR path LIKE 'rss.xml'
SQL;
  $count_RSS_subscr = db_fetch_array(db_query($sql));

  $header = [
    t('Description'),
    t('Value'),
  ];
  $rows = [
    [t('External referrers today'), $count_referrer_ext_day['referrers']],
    [t('Internal referrers today'), $count_referrer_int_day['referrers']],
    [t('Viewed nodes today'), $count_nodes_view_daily],
    [t('Viewed nodes all time'), $count_nodes_view_total],
    [t('Viewed pages today'), $count_pageviews_day['hits']],
    [t('Hits today'), $count_hits_day['hits']],
    [t('RSS feed subscribers'), $count_RSS_subscr['hostname']],
  ];

  $attributes = ['summary' => t('Xstatistics summary')];
  return theme('table', $header, $rows, $attributes);
}

/**
 * Build usage data.
 *
 * @return string
 *   A formatted table of results.
 */
function xstatistics_do_usage() {
  // Prepare amount of nodes.
  $sql = <<<SQL
SELECT COUNT(nid) 
FROM {node}
SQL;
  $count_nodes_total = db_fetch_array(db_query($sql));

  $sql = <<<SQL
SELECT COUNT(nid) 
FROM {node} 
WHERE status=1
SQL;
  $count_nodes_published = db_fetch_array(db_query($sql));

  $sql = <<<SQL
SELECT COUNT(nid) 
FROM {node} 
WHERE moderate = 1
SQL;
  $count_nodes_queueud = db_fetch_array(db_query($sql));

  // Prepare amount of users.
  $sql = <<<SQL
SELECT COUNT(uid) 
FROM {users}
SQL;
  $count_users_total = db_fetch_array(db_query($sql));

  // Prepare amount of comments.
  $sql = <<<SQL
SELECT COUNT(cid) 
FROM {comments} 
WHERE status = 0
SQL;
  $count_comments_total =  db_fetch_array(db_query($sql));

  $header = [
    t('Description'),
    t('Value'),
  ];
  $rows = [
    [t('Nodes'), $count_nodes_total['COUNT(nid)']],
    [t('Published nodes'), $count_nodes_published['COUNT(nid)']],
    [t('Nodes in the queue'), $count_nodes_queueud['COUNT(nid)']],
    [t('Comments'), $count_comments_total['COUNT(cid)']],
    // Without -1, it counts anonymous as a user.
    [t('Users'), $count_users_total['COUNT(uid)'] - 1],
   ];
  $attributes = ['summary' => t('Xstatistics usage')];
  return theme('table', $header, $rows, $attributes);
}
